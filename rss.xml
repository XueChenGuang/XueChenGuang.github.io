<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>雪刀</title>
        <link>http://example.com</link>
        <description>nice to meet you!</description>
        <language>zh-CN</language>
        <pubDate>Tue, 18 Jul 2023 19:10:06 +0800</pubDate>
        <lastBuildDate>Tue, 18 Jul 2023 19:10:06 +0800</lastBuildDate>
        <category>hello blog</category>
        <item>
            <guid isPermalink="true">http://example.com/2023/07/18/%E5%AE%9E%E4%B9%A0%E6%B1%87%E6%80%BB/</guid>
            <title>实习汇总</title>
            <link>http://example.com/2023/07/18/%E5%AE%9E%E4%B9%A0%E6%B1%87%E6%80%BB/</link>
            <pubDate>Tue, 18 Jul 2023 19:10:06 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;前言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h3&gt;
&lt;p&gt;本篇是技术文。&lt;br&gt;
实习以来，接触了很多的东西，下面从几个方面简单罗列一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语言：Java、Python&lt;/li&gt;
&lt;li&gt;框架：SpringBoot、Hibernate、Mybatis、Django&lt;/li&gt;
&lt;li&gt;数据：MySQL、Milvus、ElasticSearch、Ceph&lt;br&gt;
PS：Ceph 分布式存储，我不知道应不应该这么分类，在公司的具体的用法就是通过 Swift/S3，与分布式存储系统进行交互，具体的业务就接触过上传附件。还有很多其他的东西，我不知道该怎么分类，我想把他们分为工具的，但是总感觉不合适，可能是因为没弄懂，确实是没弄懂，后面单独讲。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;粗略的过一下&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#粗略的过一下&#34;&gt;#&lt;/a&gt; 粗略的过一下&lt;/h3&gt;
&lt;p&gt;这篇我没有详细的框架，但是有个很明确的想法（串一下目前接触到的技术），所以肯定全部是略讲。&lt;br&gt;
串的话，我主要打算按照时间线来，回顾一下两个月接触到的各种工具、技术…&lt;/p&gt;
&lt;h4 id=&#34;单元测试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#单元测试&#34;&gt;#&lt;/a&gt; 单元测试&lt;/h4&gt;
&lt;p&gt;刚开始来的时候，我主要是写 Junit 来熟悉组内接手的业务，这边先是写的 Java 项目的单元测试，后面又写了 Python 的单元测试。&lt;br&gt;
对于 Java 而言，组内使用的框架是 Junit+PowerMockito。这边讲一下单元测试主要的思想：检验代码逻辑，按照软件工程的概念，就是对于业务代码的测试，也属于最底层的测试了，所以一般是由程序员编写测试用例。组内使用的框架是 Junit+PowerMockito，感觉主要的还是 mock，也就是所谓的打桩（模拟）。通过模拟当前程序之外的对象 / 函数，来检验逻辑的正确性。Java 主要就是通过 PowerMockito 来模拟对象，以及对象的行为。其中印象比较深刻的点在于可变参数方法的 mock、多线程 mock 以及有无返回值方法的 mock，其他的感觉都是一些正常的 mock。&lt;br&gt;
对于 Python 而言，和 Java 对应的话，就是 TestCase+mock。接触的 Junit 是基于 Django 写的后端的前台管理，使用的是 Django 内部的 TestCase+Python 的 Patch+MagicMock。测试类继承 TestCase，使用 @patch 来模拟方法以及 MagicMock 来模拟对象。@patch 相当于注入，MagicMock 相当于 new，可以简单的这么理解。其中印象深刻的点在于，@patch 注入和方法中的参数是相反的（这边描述的很抽象，我也没截图，大概只有我自己能看懂）、需要额外定义 side_effect 函数，并且传给 mock 对象的 side_effect 属性，来模拟对象的行为、Python 中比较抽象的在于它 @patch 传入方法不是对象，这个 Java 相比还是很大区别的，当时也被坑了好久，其他的感觉也就正常吧，主要是和 Java 有很多不一样的点。&lt;br&gt;
PS：其中对于测试用例的书写，大致是通过数据库表结构或者代码中用到的属性来 mock；正规是要最后使用 assert 来断言，但是我目前还没体会到这个 assert 的作用，总感觉不好用；不太科学的衡量标准，检测当前 UT 的标准是覆盖率。&lt;/p&gt;
&lt;h4 id=&#34;项目开发&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#项目开发&#34;&gt;#&lt;/a&gt; 项目开发&lt;/h4&gt;
&lt;p&gt;其一，完整的项目开发就是公司提供的 MIT，针对校招生的开发实践，目的主要是为了熟悉公司的工具和框架吧。&lt;br&gt;
这个项目非常的完整，从 0 开始，需要申请 App ID，走公司的流水线平台。这个 App ID 就是公司识别项目的唯一标志。流水线的话，可以理解为一条龙吧，主要是 CI/CD（持续集成）。这边有很多的概念，我主要讲一下这流水线中涉及到的东西吧。将 Git 与 CI/CD 工具关联（公司平台做了），当 push 的时候，自动生成对应的镜像，平台可以配置集群（针对项目，也就是项目可以部署在多个服务器上，可以做一些访问限制以及负载均衡），很多功能，更多的是作为一个工具，这个平台也就是将项目开发部署和维护都交给程序员了，这也是 CI/CD 的核心理念吧。申请 App ID 之后，就相当于有了一个通行证吧，然后通过公司的脚手架创建 SpringBoot Web 项目。通过脚手架创建的好处，就是公司内部的一些默认配置会给你设定好。这边就涉及到公司使用的 BOM（写在 POM 中，公司内部的 Jar 包版本管理，原理没有了解过），其作用相当于&lt;dependencyManagement&gt;，后续使用公司内部的 Jar 包就不需要指定版本了，也避免了一些版本冲突。从数据说起的话，就是题目提供的 mysql 和 Redis，两个都是公司建好的集群（公司内部一般数据都是统一化管理，并且封装一层访问方式，为了避免密码的配置）。公司通过 DAL（应该是公司内部封装的 mysql 的连接方式）建立与 mysql 的数据连接，Redis 的话是直接调的公司的 Jar 包。当然要配置 SqlSession，也就是这边深刻理解了 bean 的注入，对于以上两者都需要进行 config 的注入，将数据连接交给 spring 管理。Redis 比较简单的使用，mysql 的话，还需要使用 JPA 规范，这里使用的是 Mybatis Plus，这边深刻理解了 Mybatis Plus 对于 SqlSession 的封装注入，与 Mybatis 还是不一样的。然后就是做一些基础的 CRUD 了。&lt;br&gt;
除了基本的业务之外，这里面增加了很多其他的东西：QMQ 消息的收发（公司内部也封装了消息中间件，个人感觉就是集群化了）。通过 Baiji 规范写 SOA 服务，并且发到公司内部的 SOA 平台上，通过 Client 实现并调用（跟 Jar 包一样）。VI 点火，也就是项目启动的时候，需要验证是否满足项目启动的标准，当然可以在项目启动之前做一些操作，比如资源的加载什么的。重量级的就是 log 埋点了，出 bug 才知道日志的重要性。所以公司有很多关于日志的平台 CLog、Cat、Dashboard…，公司内部封装很多工具，将 @slf4j 生成的 log 直接上传到 log 管理平台，提供日志分析等等。深刻体会日志埋点的重要性。&lt;br&gt;
PS：这个学到了很多的东西，除去熟悉了公司的工具和技术架构之外，从头到尾捋顺了项目的开发。建立了一个比较规范的包结构。深入理解了对象注入。&lt;/p&gt;
&lt;p&gt;其二，非完整项目开发，也就是对已有项目修改，或者开发一些新的接口。&lt;br&gt;
第一个场景是合并带有时间戳的数据库记录，类似于交并集的算法题。说的专业点的话，就是先 sort，使用贪心进行记录的合并。基本和算法题一模一样，只是涉及了一点业务背景，其中涉及到对象解包，也就是将内部封装好的 DTO 对象，通过 BeanUtil 拆解为 map 集合，然后再添加一些新的键值对，返回给前端。上次用的 apache 的 BeanUtil，但是建议貌似使用 mapstruct 比较好一点。第二个场景与 ElasticSearch 相关，其实需求很简单，就是根据用户当前的状态信息，筛选 es 上的数据。了解了 es 的数据结构，一如既往，对于数据库而言，肯定有配套的语句，而最难的肯定是 select。对于 es 也一样，我大部分经历也是在学习它的语法，后面会有专门的文章来分享一下 es，从搭建到检索。这个项目并没有使用目前现有的工具，历史原因吧可能，直接使用的 template 模板文件来生成语句（这边提一嘴，这也就是底层吧，比如使用其他的工具的时候，就是对于这个模板语句的生成做了封装），这边学到的点就是对于 freemarker 这类的模板工具有了深刻的理解，后面也打算深入学习一下，然后搞一篇。第三个场景是附件上传，这边接触到了 Ceph，两类访问方式吧（Swift 和 S3），目前只知道这是个分布式的存储系统，实现的话也是通过 Swift/S3 连接服务器，然后上传的话，直接返回一个 URL，可以直接以 get 方式下载资源。实现也很简单吧，但是里面的东西还是很多的。一个是了解了 Session 和 Cookie，因为 Session 是服务端加工的，一般要 setAttribute，所以对于 controller 拿数据的时候，@requstParam 和 @requestAttribute 还是不一样的，细品，反正我经过这个接口直接深入体会。还有的话就是这里的一个工程性的点，一般对于这个需求的话，我直接上传返回 URL 直接就结束了，但是我从佳文那里学到的点就是，本地需要建立一张附件信息表，记录上传的附件信息，是不是很有必要！&lt;/p&gt;
&lt;h4 id=&#34;结尾&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#结尾&#34;&gt;#&lt;/a&gt; 结尾&lt;/h4&gt;
&lt;p&gt;说实话，真的很难写。&lt;br&gt;
一个是我的语言表达一向有很大的问题，二者确实脑子现在很混乱，有很多就没有理清楚…&lt;br&gt;
 所以我也就抱着记录一下的心态来写，主要是记录一下涉及到的知识点吧，后面理清楚一点再重新写这篇，并且其中也埋下了很多技术坑，不知道有生之年能不能填上。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2023/07/15/%E6%90%AD%E5%BB%BA%E5%A4%9A%E9%9D%A2%E4%BD%93%E7%9A%84%E6%9E%B6%E6%9E%84%E4%BB%A5%E5%8F%8A%E6%8B%A6%E8%B7%AF%E8%99%8E/</guid>
            <title>搭建”多面体“的架构以及拦路虎</title>
            <link>http://example.com/2023/07/15/%E6%90%AD%E5%BB%BA%E5%A4%9A%E9%9D%A2%E4%BD%93%E7%9A%84%E6%9E%B6%E6%9E%84%E4%BB%A5%E5%8F%8A%E6%8B%A6%E8%B7%AF%E8%99%8E/</link>
            <pubDate>Sat, 15 Jul 2023 16:38:28 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img data-src=&#34;https://i.imgtg.com/2023/07/15/OzdvOt.png&#34; alt=&#34;Alt Text&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;前言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h3&gt;
&lt;blockquote&gt;&lt;p&gt;天不生我大白鹅，画界万股如长夜！&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;——毕加索&lt;/strong&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;咳咳，如大家所见，鄙人走的抽象派…&lt;br&gt;
 今天我们就来纸上谈兵一手，分析一下，如何靠的一张嘴，搭建一个前后端系统。&lt;/p&gt;
&lt;h3 id=&#34;多面体的架构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多面体的架构&#34;&gt;#&lt;/a&gt; “多面体” 的架构&lt;/h3&gt;
&lt;p&gt;先是自身的想法，我想将这个静态的博客，搭建成一个前后端分离的博客系统。为什么这么想呢，主要有几个原因：&lt;br&gt;
其一，实习学到的一点技能，想找个地方挥霍一把。&lt;br&gt;
其二，就想拆一下这个 hexo 搭建的静态 page&lt;br&gt;
 其三，很主要的原因，主要是不想写论文，找点喜欢的事做做…&lt;/p&gt;
&lt;p&gt;可以从图上得知，本人的画技如此的滑稽…，&lt;br&gt;
可以从上图得知，我想将 Hexo 作为一个只生成博客的空壳，将数据从里面分离出来，持久化到 mysql，然后通过后端的 API，将数据返回给前端，这样就前后端分离了。那么能不能有个发布博客的后台呢，以及统计一些数据、展示图表的后台呢，我觉得可以有，这样直接就可以线上，可以线下了，岂不美滋滋。&lt;/p&gt;
&lt;p&gt;大体而言，外面能看到的，也就是域名能够访问到的，当然还是和之前一样，只有博客。我目前还没有完全想好这个博客是不是要动态资源，还是直接用前端的技术来做检索，并且还将资源直接以静态的方式存储在服务器上。然后备份一份（所谓的持久化到 mysql），给后端做处理，在后台管理页面也能展示不一样的东西。因为如果这样做的话，有几个优势吧：&lt;br&gt;
其一，消耗的资源小，并且静态的博客也可以完全用之前的一套，少消耗点精力，再者我不用另外租服务器了&lt;br&gt;
其二，这本来就没打算给外界访问，所以后台做线下处理很符合我的需求，但是就是需要手动同步数据，就很无语，不知道有什么什么其他的好方法。&lt;/p&gt;
&lt;p&gt;但是思来想去，还是觉得前后端分离要高大上一点，也就是有违博客的初衷了。&lt;/p&gt;
&lt;h3 id=&#34;拦路虎&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#拦路虎&#34;&gt;#&lt;/a&gt; 拦路虎&lt;/h3&gt;
&lt;p&gt;唉，直接叹气，md&lt;br&gt;
 简直对前端一窍不通，主要是感觉之前学的 vue，以及一些基础的 html，css，js。到如今这个封装的不像样的年代，总感觉中间搁着好多层，就好比后端，springboot 和原生的 java 也搁着好多层，但是熟悉的就用着很顺手，不过是个注解 + 配置的事。但是对于不熟悉前端的我而言，这个就跟看天书一样，很是无力，我想，自定义有点远去了。&lt;/p&gt;
&lt;p&gt;我现在要干的事，是将这个获取静态资源的方式，直接以 api 的方式来调取后端接口，这个基于 vue 写 axios 我倒是没问题，后端 springboot 我也没问题，就是不知道如何分离这段前端的代码。按理说，这个前端的代码里面，肯定有获取 source 文件里面资源，然后调用 markdown 解析器，结合主题，将文档转化为 html 的一个过程。找到这个，将这个资源的获取，直接替换成 api，说起来很简单，但是我还没看代码，还不确定是不是这么简单。&lt;/p&gt;
&lt;p&gt;目前还不知道这个站内搜索的功能是不是直接 nodejs 做的，如果我不前后端分离的话，那就很简单，配置一下，也就是需要去找找文档，配置一下这块的东西，但我如果要分离的话…，同上&lt;/p&gt;
&lt;p&gt;最大的叹息就是他娘的，这个自定义主题的事了，我看到了我很喜欢的主题，但是人不开源，我也想自力更生一波，但是以前写前端都是小孩子过家家，搁大人面前玩泥巴，幼稚的很呐。那界面也是离谱的狠，哪有专门搞前端的厉害。&lt;/p&gt;
&lt;p&gt;吐槽归吐槽，还是该做啥做啥，目前就配置着用呗。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2023/07/13/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87blog/</guid>
            <title>我的第一篇blog</title>
            <link>http://example.com/2023/07/13/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87blog/</link>
            <category>hello blog</category>
            <pubDate>Thu, 13 Jul 2023 14:14:28 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;&lt;p&gt;优雅的人，都要搞自己的博客。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;——鲁迅&lt;/strong&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;当我接触到代码的小世界的时候，我就立志要写出优雅的代码。正当我为了这个宏伟的目标而努力的时候，偶然间我看见了鲁大师的名言，所以我来了！&lt;/p&gt;
&lt;h3 id=&#34;前言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h3&gt;
&lt;p&gt;不知道大家是怎么想的，我打算搞个自己的博客的第一出发点就是，能够有个完全由自己 DIY 的小世界。&lt;br&gt;
这个小世界，就好比小时候的秘密基地，只有你有这个地方的钥匙，可以天马行空，可以记录任何自己想记录的东西，是不是很激动，反正我内心激动无比。&lt;br&gt;
这个小世界，就好比一扇单向可见的玻璃，当你建立域名，将这个小世界挂出去的时候，就感觉所有人都看到了，但是你的网址并没有被搜索引擎收录，当然可以配置，但是这种感觉就是相当的奇妙。&lt;br&gt;
这个小世界，此处并没有排比，哈哈！&lt;br&gt;
PS：我是真的想写好第一篇 blog 的前言，但是我一码字，就跟个手残党一样，脑子里骚操作一堆，实操只会平 A，skr…，麻了欸。&lt;/p&gt;
&lt;h3 id=&#34;我是谁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#我是谁&#34;&gt;#&lt;/a&gt; 我是谁&lt;/h3&gt;
&lt;p&gt;哈哈哈，没错，我是这里的站长！！！&lt;br&gt;
我命由我不由…，咳咳，&lt;/p&gt;
&lt;h3 id=&#34;它是谁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#它是谁&#34;&gt;#&lt;/a&gt; 它是谁&lt;/h3&gt;
&lt;p&gt;这个有说法的，这个地方我想让它继承我毕生所学，将来世袭给…。总而言之，我想叫它多面体，为什么不叫冰柠檬…&lt;/p&gt;
&lt;h3 id=&#34;我想干什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#我想干什么&#34;&gt;#&lt;/a&gt; 我想干什么&lt;/h3&gt;
&lt;p&gt;这个也有说法的，直接整的专业点的好了。&lt;br&gt;
作为一个站长，我有建设，维护和使用它的权力和义务。&lt;br&gt;
所以&lt;br&gt;
 1、我会在这里发文章，可以是技术文，口水文。目前来讲我是有很多想法的，我想写一些技术博客，却不放在 CSDN，知乎、掘金这些平台上面；我想发一些日常，但是却不发在朋友圈、空间、微博这些社交平台上面；我想记录一些金句，包括抽象的、富含文艺气息的以及其他；我想罗列一些自己的计划，可以是长期的 flag，也可以是短期的待办；我想…&lt;br&gt;
2、我会改造多面体，真的，当你搞个自己的博客，你就感觉这就像你的孩子，你喜欢的人一样，想起它你就会情不自禁的嘴角上扬。目前这个博客只是静态的 page，用 Hexo 搭建的，使用的是 shokaX 主题，搞了个阿里的域名，静态资源挂在了 github 上面。我目前有很多很多的想法，但是鉴于个人能力，想法只能是想法，但是我已经迈出了最为艰难的一步，后面会写一篇关于我的建设的文章。&lt;br&gt;
3、我会维护多面体，这也有很多的方面吧，运营方面的话，就是这个域名啊，后面我加的东西多了，我可能就得办个服务器，不能再用 github 来托管了；对于站点本身，也就是架构，如果时间够久，肯定会面临着技术架构翻新的时候，所以我也会尽量保证紧跟时代的潮流。我当然想自己搞个主题，100% 量身打造，可是现实很骨感，我就尽量挑选比较贴合自己阶段审美的主题，添加一些自己需要的功能、专栏；对于整个开发的流程，目前比较简陋，开发部署，搞个文章都很轻松，但是后面加入后台的前后端，并且数据量，整个平台的复杂度上来的话，我感觉需要使用 CI/CD 工具，并且加入数据分析等等东西，&lt;br&gt;
总之，感觉目前就是处于头脑风暴阶段，什么都想干，什么都干不了，所以经验告诉我，我需要细化，我需要一步步慢慢来，我目前想到的最好的办法就是：&lt;br&gt;
我面临的敌人前所未有的强大，我想建设好多面体，我就需要让我自己保持新鲜的活力，让自己承受刚刚好的压力，并且一直能够进步，我相信，这样的话我应该能走的远一些。&lt;br&gt;
譬如，我另一个想法，我不打算搞这个博客站点的数据，打算随便搞点 md 进来，丰富一下数据，然后直接搞后端，搞一些数据分析，清洗数据，没准结合一下大语言模型等等，但是想着想着就不想搞了。&lt;br&gt;
思来想去，我总觉得，要想长久经营下去，得要建立数据感情，也就是，这个站点的数据都是自己的，也就是这些文章都是我想发的，想写的，这样我才会想着更好的去建设多面体。&lt;br&gt;
所以，我目前就打算多写一些文章，罗列一些技术栈，画一些设计文档等等&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
