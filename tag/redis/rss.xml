<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>该死的秋招 • Posts by &#34;redis&#34; tag</title>
        <link>http://example.com</link>
        <description>孵化中···</description>
        <language>zh-CN</language>
        <pubDate>Tue, 03 Oct 2023 13:35:20 +0800</pubDate>
        <lastBuildDate>Tue, 03 Oct 2023 13:35:20 +0800</lastBuildDate>
        <category>hello blog</category>
        <category>设计模式</category>
        <category>MySQL</category>
        <category>算法</category>
        <category>Redis</category>
        <category>其他</category>
        <category>分布式</category>
        <category>数据结构</category>
        <item>
            <guid isPermalink="true">http://example.com/2023/10/03/Redis%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96/</guid>
            <title>Redis的持久化</title>
            <link>http://example.com/2023/10/03/Redis%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96/</link>
            <category>Redis</category>
            <pubDate>Tue, 03 Oct 2023 13:35:20 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;写在前面&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#写在前面&#34;&gt;#&lt;/a&gt; 写在前面&lt;/h3&gt;
&lt;p&gt;关于面试，我觉得持久化这边可以问的点还是挺多的，总的来说就是两个方法 AOF+RDB；然后两者中和，具体怎么中和的可以问，然后流程，涉及到写时复制以及调用 fsync，fork 创建子进程而产生的主线程页表复制等等&lt;/p&gt;
&lt;h3 id=&#34;aof&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#aof&#34;&gt;#&lt;/a&gt; AOF&lt;/h3&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2023/09/20/Redis%E7%BC%93%E5%AD%98/</guid>
            <title>Redis缓存</title>
            <link>http://example.com/2023/09/20/Redis%E7%BC%93%E5%AD%98/</link>
            <category>Redis</category>
            <pubDate>Wed, 20 Sep 2023 22:23:45 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;前言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h3&gt;
&lt;p&gt;一切都是为了更流利的表达&lt;/p&gt;
&lt;h3 id=&#34;缓存雪崩-击穿-穿透的定义以及解决方案&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缓存雪崩-击穿-穿透的定义以及解决方案&#34;&gt;#&lt;/a&gt; 缓存雪崩、击穿、穿透的定义以及解决方案&lt;/h3&gt;
&lt;h3 id=&#34;缓存同步策略&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缓存同步策略&#34;&gt;#&lt;/a&gt; 缓存同步策略&lt;/h3&gt;
&lt;h3 id=&#34;高可用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#高可用&#34;&gt;#&lt;/a&gt; 高可用&lt;/h3&gt;
 ]]></description>
        </item>
    </channel>
</rss>
