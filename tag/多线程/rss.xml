<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>该死的秋招 • Posts by &#34;多线程&#34; tag</title>
        <link>http://example.com</link>
        <description>孵化中···</description>
        <language>zh-CN</language>
        <pubDate>Tue, 24 Oct 2023 09:55:44 +0800</pubDate>
        <lastBuildDate>Tue, 24 Oct 2023 09:55:44 +0800</lastBuildDate>
        <category>hello blog</category>
        <category>设计模式</category>
        <category>MySQL</category>
        <category>算法</category>
        <category>Redis</category>
        <category>其他</category>
        <category>分布式</category>
        <category>数据结构</category>
        <category>Spring</category>
        <category>Thread</category>
        <category>Java</category>
        <category>JDK</category>
        <category>SQL</category>
        <category>JVM</category>
        <category>多线程</category>
        <category>kafka</category>
        <category>SpringBoot</category>
        <category>JUC相关零碎知识点乱写</category>
        <category>hashmap</category>
        <category>JUC</category>
        <item>
            <guid isPermalink="true">http://example.com/2023/10/24/synchronized/</guid>
            <title>synchronized</title>
            <link>http://example.com/2023/10/24/synchronized/</link>
            <category>多线程</category>
            <pubDate>Tue, 24 Oct 2023 09:55:44 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;写在前面&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#写在前面&#34;&gt;#&lt;/a&gt; 写在前面&lt;/h3&gt;
&lt;p&gt;对于 synchronized 一直理解就那样，最近学到一点关于对象结构以及锁升级的具体详细的情况，做个记录&lt;/p&gt;
&lt;h3 id=&#34;classlayout&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#classlayout&#34;&gt;#&lt;/a&gt; classlayout&lt;/h3&gt;
&lt;p&gt;对于 object o = new object (); 具体的 jvm 内的情况就是刨去类加载不说，现在要说的是给对象在 jvm 堆中分配内存空间。然后线程栈帧中分配一个变量 o 指向堆中 new 出来的对象。那么这个堆中的对象到底是怎样一个情况呢。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/65372b89c458853aef883bbf.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;
大致的情况，上图就是一个对象的 layout，其中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象头，包括 mark word（8 字节）和 class pointer（开启压缩 4 字节，不开压缩 8 字节），如果是数组的话还会包括一个 4 字节的数组长度。所以说数组最大长度 2^32 -1; 最重要的就是 mark word 中的信息了，其中包括了锁信息以及 hashcode 信息（延迟加载）还有 gc 信息等。&lt;/li&gt;
&lt;li&gt;实例数据，如果有属性的话，就是属性字段，用到了父类的属性也有父类的信息&lt;/li&gt;
&lt;li&gt;空白填充，也就是 jvm 64 的要求，对象的开始必须是 8 字节的整数倍，所以需要填充&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;synchronized锁升级&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#synchronized锁升级&#34;&gt;#&lt;/a&gt; synchronized 锁升级&lt;/h3&gt;
&lt;p&gt;在 1.6 之前，synchronized 是没有升级过程的，直接使用 mutex lock，互斥锁。也就是所谓的重量级锁。&lt;/p&gt;
&lt;p&gt;对于什么偏向锁，轻量级锁，重量级锁的概念，也就只有重量级锁才是真正的上锁，也就是将线程入队列，交给了 os 进行管理，会涉及到用户态和内核态的转化。其余的都相当于没上锁，也就是在用户态的层面完成了线程的同步管理。&lt;/p&gt;
&lt;p&gt;背景：当一个资源是共享资源的时候，那么如果在多线程的环境下我们需要保证线程安全的话也就是满足线程三要素，那么就可以通过 synchronized 完成，所以说这个背景是已经加上了 synchronized 字段了。那么改进了一上来就重量级锁的情况，四个状态出现了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无锁，001，也就是没有线程用到这个资源的时候，这个对象 mark word 中的锁信息&lt;/li&gt;
&lt;li&gt;当有线程要用到的时候，A 线程看到 01，并且前面是 0，那么上偏向锁，通过 cas 的方式将其中的 0 改成 1，并且将自己的 threadid 给放到前面去（当前线程指针）。这边说一下为什么要 cas，因为可能有多个线程同时看到 01，然后去修改，那么这时候是存在竞争的（隐式竞争），所以只要修改资源，就 cas 活锁。&lt;/li&gt;
&lt;li&gt;那么 B 线程看到了 101，需要再看看前面的 threadid 是不是自己，如果不是的话，锁升级 00，轻量级锁。这边的细节就是前面的指针信息换了，换成了每个线程在自己的线程栈中生成一条 lock record，然后将对象头中的前面的字段指向 lock record，完成上锁（至于这边也是有疑问的，为什么还不是直接用各自的 threadid），其实也是没锁的，就是上个字段。&lt;/li&gt;
&lt;li&gt;如果 00 锁，cas 自选到一定程度，10 次？那么锁升级，线程入队直接交给 os 处理，并且其中的锁信息也是换成了真正的锁 monitor，通过加上 monitor enter 和 monitor exit 来完成整段的汇编指令。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中应该是有 cas 自旋优化的，也就是 epoch 字段，但是不了解，大致的说法貌似式如果上次通过 cas 获取到了锁，那么这次就延长 cas 的时间，如果上次 cas 没有获取到，那么缩短。但是疑问就是没有 cas 到不就锁升级了么，不知道怎么事他娘的。&lt;/p&gt;
&lt;h3 id=&#34;总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h3&gt;
&lt;p&gt;大致的一整个 synchronized 就结束了，目前感觉挺通透的。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2023/10/11/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/</guid>
            <title>多线程的三大特性</title>
            <link>http://example.com/2023/10/11/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/</link>
            <category>多线程</category>
            <pubDate>Wed, 11 Oct 2023 11:49:38 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;写在前面&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#写在前面&#34;&gt;#&lt;/a&gt; 写在前面&lt;/h3&gt;
&lt;p&gt;深信服面试的时候，面到了多线程的三大特性，虽然多线程这块比较熟悉，但是概念没有对应上，在面试官友好的提示下说了出来，但回想一下确实是自己还没有完全搞明白，不然怎么会对应不上这个简单的概念呢，话不多说，直接开始&lt;/p&gt;
&lt;h3 id=&#34;多线程的三大特性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多线程的三大特性&#34;&gt;#&lt;/a&gt; 多线程的三大特性&lt;/h3&gt;
&lt;p&gt;并不是说起个多线程就一定满足三大特性，只是不满足三大特性会有很多的线程安全问题，那么要消除线程安全，就需要选择性的满足这三大特性，所以其中的点还是蛮灵活的。&lt;/p&gt;
&lt;p&gt;网上都是按照可见性，原子性，顺序性来讲；但是其实这三点并不能完全分隔，只能说概念上可以分割一下&lt;/p&gt;
&lt;p&gt;我起初了解并意识到三大特性的时间还是在了解内存模型的时候，从硬件到 JVM 的内存模型，有个映射关系，具体直接看图&lt;br&gt;
&lt;img data-src=&#34;https://pic.imgdb.cn/item/65261d4dc458853aef2d8210.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这边也有一个可以说的点，我就说的长一点好了：&lt;br&gt;
CPU 的处理速度和内存的读写速度差距过大，所以在 CPU 和内存之间加入了 CPU 寄存器和 CPU 缓存来提高效率，也就是 SRAM 和 DRAM 的来源了。&lt;/p&gt;
&lt;p&gt;这样的结构对于单线程来说，也就是单核 CPU 来说是完全没问题的。但是多核的发展，给这样的模型带来了困扰，也就是经典的缓存不一致问题，也就是可以想象为数据共享，但是主存中才是真正的共享数据，缓存中是数据副本，所以造成了不一致，因而后面出现了缓存一致性协议，直白点说就是涉及到了同步问题。因而就会出现对于耗时长的指令会到之后面的指令暂停，所以就出现了指令重排序。所谓的指令重拍，并不是乱排，而是让不相干的指令可以不用等待而提前执行。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/65261f17c458853aef33887e.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;
这个是线程的执行逻辑，其中与主存打交道交给 JMM 控制，那么具体的映射关系是 thread 中用到的 threadstack 大多存放在缓存中，但是对于 heap 大多存放在主存中，所以对于下层的屏蔽，我们只需要和 threadstack 以及 heap 打交道，而不必与硬件打交道。线程中也是用到了工作内存和主存，感觉和 CPU 缓存以及主存差不多。&lt;/p&gt;
&lt;p&gt;有了上面的内存结构，那么就出现了下面的线程三大特性了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可见性，由于内存模型的问题，大致可以分为主存和工作内存，所以多线程工作的时候，对于工作内存中的变量（主存副本），存在不一致的情况。要保证可见那么可以通过 volatile 标记或者 synchronized 关键字或者 lock 来实现。简单说一下加锁和 volatile 的区别，volatile 强制更改后刷新到主存，并且读取 volatile 变量的时候强制从主存中读取。对于加锁而言，修改之后提交到主存，读取的时候需要删除工作内存中的数据，然后从主存中进行读取（其中涉及到了内存 lock 和 unlock 指令）&lt;/li&gt;
&lt;li&gt;原子性，一组要么成功要么失败&lt;/li&gt;
&lt;li&gt;顺序性，主要是要讲一下 happends before 原则。涉及三点主要，实际上跟多，单线程中的总式顺序的，也就是无论指令如何重排，结果肯定与顺序读取的代码是一致的结果；加锁，同一个锁的加锁肯定在解锁之前；volatile 前面的肯定先于后面的&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
