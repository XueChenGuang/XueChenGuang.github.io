{
    "version": "https://jsonfeed.org/version/1",
    "title": "该死的秋招 • All posts by \"其他\" tag",
    "description": "孵化中···",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/10/31/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/",
            "url": "http://example.com/2023/10/31/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/",
            "title": "加密解密",
            "date_published": "2023-10-31T06:25:59.000Z",
            "content_html": "<h3 id=\"写在前面\"><a class=\"markdownIt-Anchor\" href=\"#写在前面\">#</a> 写在前面</h3>\n<p>对于加密解密，看场景题看到的，做一下记录</p>\n<h3 id=\"算法\"><a class=\"markdownIt-Anchor\" href=\"#算法\">#</a> 算法</h3>\n<p>有对称加密算法 AES、DES 等<br>\n也就是明文经过同一套密钥进行加密解密，优缺点都很明显，优点就是快，缺点就是容易被拦截，信息安全没有保障。</p>\n<p>非对称加密，也就是公钥私钥这一套<br>\n公钥私钥是由 server 端生成的，并且私钥留存在 server 端，公钥分发给 client；这样的模式也能够进行数字签名，因为 client 使用公钥来解 server 端给出的用私钥加密过的文件。</p>\n<p>优缺点也是明显，优点就是可以保证安全；缺点就是很慢，因为多了一个请求公钥的过程，并且每次都要通过公私钥进行加解密，比较复杂所以就很慢。</p>\n<p>优化就是 mix，将对称加密的算法通过公私钥进行传递给双方，然后下面就通过对称加密进行数据传输，所以刚开始这个对称加密的算法是不会被拦截的，并且也就是第一次较慢，后面很快。</p>\n",
            "tags": [
                "其他"
            ]
        },
        {
            "id": "http://example.com/2023/10/28/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/",
            "url": "http://example.com/2023/10/28/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/",
            "title": "职业规划",
            "date_published": "2023-10-28T03:17:16.000Z",
            "content_html": "<h3 id=\"职业规划\"><a class=\"markdownIt-Anchor\" href=\"#职业规划\">#</a> 职业规划</h3>\n<p>当被问到职业规划的时候，其实也是一个比较有挑战的一个问题。遵从本心吧。</p>\n<p>对于 java 的规划路线我还是比较熟悉的。对于一些基础例如计网、数据结构、算法以及操作系统等在学校已经打好基础了。对于项目经验的话，目前对于并发编程以及分布式，这也是行业中的难点。所以如果有机会会在实际工作中更偏向于这块的技术提升。个人也是比较喜欢技术的，更偏向于转架构师。</p>\n<p>架构师的基础对于 java 来说，并且是 web 来说，更需要一些并发的底层 juc 的工具包底层 aqs，源码以及知识点也了解不少，jvm 性能调优也就是 gc 以及内存管理以及 JVM 的众多参数</p>\n<p>1、公司适应，有实习基础，公司的开发模式<br>\n 2、技术提升，持续学习，技术迭代（对于有一定了解但是接触很少的技术在公司中实践提升。<br>\n3、架构师（由面向功能转面向性能，整体架构，技术选型，jvm，并发，工具调参等等）</p>\n<p>保持一个持续学习的思想，因为本身计算机的技术迭代还是很快的。</p>\n",
            "tags": [
                "其他"
            ]
        },
        {
            "id": "http://example.com/2023/09/22/%E7%AC%94%E8%AF%95%E9%80%89%E6%8B%A9%E9%A2%98%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86%E7%82%B9-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/",
            "url": "http://example.com/2023/09/22/%E7%AC%94%E8%AF%95%E9%80%89%E6%8B%A9%E9%A2%98%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86%E7%82%B9-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/",
            "title": "笔试选择题零散知识点--持续更新",
            "date_published": "2023-09-22T03:28:03.000Z",
            "content_html": "<h3 id=\"写在前面\"><a class=\"markdownIt-Anchor\" href=\"#写在前面\">#</a> 写在前面</h3>\n<p>主要为了应付选择题一些极其细节的编程问题，还有一些范围很广的概念性问题，话不多说，直接开始</p>\n<h3 id=\"无标题\"><a class=\"markdownIt-Anchor\" href=\"#无标题\">#</a> 无标题</h3>\n<p>1、基础类型的使用：<br>\n必须赋初值，然后使用，不然直接报编译错误，无法通过编译。<br>\n但是引用类型或者数组就不一样，对于 new 的</p>\n<p>2、集合继承图<br>\n<img data-src=\"https://pic.imgdb.cn/item/650d122ac458853aef243cba.png\" alt=\"alt\"><br>\n 这边主要是将 map 记混了，以为都是继承的 collection，然后就是有一些线程安全的集合，vector、hashtable 以及 stack 是继承的 vector</p>\n",
            "tags": [
                "其他"
            ]
        }
    ]
}