<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>该死的秋招 • Posts by &#34;juc相关零碎知识点乱写&#34; tag</title>
    <link href="http://example.com" />
    <updated>2023-10-21T03:56:44.000Z</updated>
    <category term="hello blog" />
    <category term="设计模式" />
    <category term="MySQL" />
    <category term="算法" />
    <category term="Redis" />
    <category term="其他" />
    <category term="分布式" />
    <category term="数据结构" />
    <category term="Spring" />
    <category term="Thread" />
    <category term="Java" />
    <category term="JDK" />
    <category term="SQL" />
    <category term="JVM" />
    <category term="多线程" />
    <category term="kafka" />
    <category term="SpringBoot" />
    <category term="JUC相关零碎知识点乱写" />
    <category term="hashmap" />
    <category term="JUC" />
    <entry>
        <id>http://example.com/2023/10/21/JUC%E7%9B%B8%E5%85%B3%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B9%B1%E5%86%99/</id>
        <title>JUC</title>
        <link rel="alternate" href="http://example.com/2023/10/21/JUC%E7%9B%B8%E5%85%B3%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B9%B1%E5%86%99/"/>
        <content type="html">&lt;h3 id=&#34;写在前面&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#写在前面&#34;&gt;#&lt;/a&gt; 写在前面&lt;/h3&gt;
&lt;p&gt;其实最近也比较浮躁，所以就开始刷一些视频，看 blog 或者书籍，有点看不下去。选择看什么视频的时候，就想到了一直在看，但是总感觉没有懂的 JUC，然后就慢慢的深入，从 java 的 JUC 的底层，从加锁不同的锁到 cas，然后 aqs，然后就是一堆 JUC 工具包对 aqs 的实现，然后还是很摸棱两可，到底会不会，如会，，，懂不懂，如懂，，，玛德，所以有些小无奈，知道今天特么看到了马士兵的教学视频，特么感觉问题点应该是出在操作系统这一块，他讲了一个虽然我一直知道，但是到那一刻才豁然的学习道理，先大再小。我反思了&lt;/p&gt;
&lt;p&gt;我一直以为我都是先大后小，先整体再细节，先大的模块再深入分解，但是我好像对于操作系统这块，线程是怎么和底层的资源进行交互的这块，并没有加入到整体的框架中来，也就是并不完整。所以我的深入就会令我不时的产生疑惑。&lt;/p&gt;
&lt;p&gt;他讲到了一个点：app 也就是所谓的软件是完全可以和硬件打交道的，也就是我们可以直接将软件建立在硬件之上（个人理解就是汇编咯，也不是说其他的语言不可以，如果可以的话估计名字就得换了），比如我们的 java，他是建立在 jvm 之上，又建立在操作系统之上然后再去接触硬件的。这也就是涉及到了历史的发展，刚开始确实是这么干的，但是 bug 频繁的触发，然后诞生了一个中间的软件 OS，也就是你们都太垃圾了，我来干硬件，然后我提供接口给你们，你们来干我，这样难度小一点。特么的真有道理，所以我们现在的软件都建立在操作系统之上。&lt;/p&gt;
&lt;p&gt;然后再来一条路，就是 JVM 这条路，可以理解 JVM 就是一个 app，当然了他只是一种规范，实现有很多种方法，最熟悉的 hotspot 就是我们常用的 JVM。这也是最近刚豁然的一个点，JVM 内存模型中有两个栈，虚拟机栈和 native 本地栈，当时一直不懂为什么要分两个。后来才明白本地栈就是对本地方法的调用，但是其实还是没懂，为什么这么说呢。&lt;/p&gt;
&lt;p&gt;因为啊，当看 JVM 底层对于 juc 的实现，其中 compareandswap 是 unsafe 这个类的方法，这个呢就是一个本地方法，这个是用 c&lt;ins&gt; 写的，也是 hotspot 虚拟机的实现里才能看间源码的，他的底层有一个 cmandchange 方法，这个呢就是涉及到汇编了貌似或者说还是 c&lt;/ins&gt; 不是很懂。这里就突然想到我们下载无论什么 app 都有版本什么 x86，linux，windows，ios，这里才明白，这就是上层软件的实现对于操作系统的调用，所以不同的操作系统这一块的实现都是不同的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/6533dbedc458853aefd86a15.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;
记录一下对于 static 和 volatile 的区别，也就是所谓的可见性的问题&lt;br&gt;
我们所了解到的，static 静态变量在 1.8 的时候被移到了堆中，那么无论是堆还是方法区都是线程间共享的。这里，第一次刷新了我的认知，也是错误的认知&lt;/p&gt;
&lt;p&gt;我们知道局部变量，也就是方法中的，那么是在线程栈里面的，也就是出栈就销毁的，也就是没有所谓的 gc。并且局部，也代表着没有所谓的共享，那么就是多线程是读不到的，也就是局部变量不允许被共享，他们是被分配在栈帧中的。有趣的来了&lt;br&gt;
我以前从未这样用过 static 或者 volatile，也就是在类的方法中声明 static 或者 volatile 变量，今天试了一下，直接报错，这意味着什么！！&lt;/p&gt;
&lt;p&gt;这意味着我将局部变量，分配在栈帧中的变量，尝试着给他拉到堆中，这本身就不可能。所以 checked exception 直接报错。&lt;/p&gt;
&lt;p&gt;接着就是我改变了这个认知，只有 static 静态变量，类级别的成员变量才有可能被线程可见，因为他们是堆中的，他们本身的属性是共享属性。也就是他们出了栈帧还能存活。来了，也就是今天刚弄懂的 static 和 volatile&lt;/p&gt;
&lt;p&gt;static 只是允许多线程读取，可见性的意思也并不是 “可读”，而是一个线程修改了，那么其他的线程能够立刻获取到其被修改了的信息。所以 static 只是保证了可读，多个线程可以读这个变量，可以拷贝过去，什么时候刷到主存呢，不确定。上面那个图很神奇，是我做的一个实验，也就是 static 变量，修改看能不能读取到，确实是可以的，但是如果循环体中没有语句的话，是不会读取到的，应该是底层做了优化了，也就是没有循环体的话，我就不会去主存中读取这个 static 变量，那么久不会检测到这个变量被修改了，很离谱就是，幸亏看到网上有说，然后我加了个循环体，然后就能退出循环了。证明了 static 变量在多线程之间是可以读取到的。&lt;/p&gt;
&lt;p&gt;这边涉及到一个概念，锁缓存行，锁总线，挺神奇的。在我们正常的理解下面，是一个线程修改了数据，因为读取缓存是以行为单位读取的，那么如果缓存一致性的情况下，另外一个线程也获取到了这块缓存行里面的数据，那么就需要通知了。所以说有的为了避免通知，也就是减少同步，就使用了缓存行对齐。&lt;/p&gt;
&lt;p&gt;缓存行：64 字节，long 8 字节，那么对其 long 的话，就前后各放 7 个无关的常量 long 即可，如果 x，y 在一个缓存行里面，那么一个线程读了 x，另一个读了 y。如果修改了其中一个，那么就需要通知另外一个线程更新这个缓存行，这样保证了缓存一致。如果 x，y 在两行，那么修改就不要通知另外一个线程。&lt;/p&gt;
&lt;p&gt;如果需要对不同行进行加锁，那么就需要锁总线&lt;/p&gt;
&lt;h3 id=&#34;cpu&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cpu&#34;&gt;#&lt;/a&gt; CPU&lt;/h3&gt;
&lt;p&gt;这里感觉要说一下 CPU 的构成，CPU 又称处理器，主要就是有几个构成 ALU，PC，Register，以及 cache。&lt;/p&gt;
&lt;p&gt;从 java 代码出发，到字节码文件，到一条条指令，ok，然后 CPU 负责将一条指令读到 Register 里面，PC 定位读到了哪边，然后 ALU 执行相关的逻辑。因为 cpu 是与内存进行交互的，但是 cpu 很快，读取的速度很慢 1：100；与硬盘差不多 1：一百万。所以就加入了 cache，那么这个 chache 也有很多层级，最常见的就是三层，最慢的就是主存了，这边的话后面再说，为什么要说缓存分层呢，因为一层和二层是在 cpu 里面的。&lt;/p&gt;
&lt;p&gt;这就有了单核双线程的说法，ALU 速度很快，那么每次线程的上下文切换都会将指令以及 PC 信息存起来，然后切换，俗称上下文切换，这个消耗也很大。那么双线程就是说两对 PC+Register，那么只需要让 ALU 换个读就完事了，上下文切换的话，当涉及到两个以上线程再进行。那么为什么不是三个，四个等，估计也是个实验数据，估计多了的话效率应该也不是线性增长的。&lt;/p&gt;
&lt;p&gt;这边还涉及到一个概念就是 CPU 与内存之间的 I/O 叫做总线，锁可以加在总线上。&lt;/p&gt;
&lt;h3 id=&#34;volatile&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#volatile&#34;&gt;#&lt;/a&gt; volatile&lt;/h3&gt;
&lt;p&gt;这个关键字涉及到很多概念，其中可见性和禁止重排来保证一致性&lt;/p&gt;
</content>
        <category term="JUC相关零碎知识点乱写" />
        <updated>2023-10-21T03:56:44.000Z</updated>
    </entry>
</feed>
