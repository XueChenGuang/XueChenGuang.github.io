{
    "version": "https://jsonfeed.org/version/1",
    "title": "该死的秋招 • All posts by \"算法\" tag",
    "description": "孵化中···",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/09/20/UF%E5%92%8CKruskal/",
            "url": "http://example.com/2023/09/20/UF%E5%92%8CKruskal/",
            "title": "UF和Kruskal",
            "date_published": "2023-09-20T09:55:31.000Z",
            "content_html": "<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] parent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">ufInit</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        parent = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            parent[i] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">union</span><span class=\"params\">(<span class=\"type\">int</span> p, <span class=\"type\">int</span> q)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">rootP</span> <span class=\"operator\">=</span> find(p);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">rootQ</span> <span class=\"operator\">=</span> find(q);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rootP == rootQ) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        parent[rootP] = rootQ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (parent[x] != x) &#123;</span><br><span class=\"line\">            parent[x] = find(parent[x]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parent[x];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">sc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"comment\">//n is node num, k is edge num</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> sc.nextInt(), k = sc.nextInt();</span><br><span class=\"line\">        <span class=\"type\">Main</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Main</span>();</span><br><span class=\"line\">        m.ufInit(n);</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] edges = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[k][<span class=\"number\">3</span>];</span><br><span class=\"line\">        <span class=\"comment\">//input edge</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">            edges[i][<span class=\"number\">0</span>] = sc.nextInt();</span><br><span class=\"line\">            edges[i][<span class=\"number\">1</span>] = sc.nextInt();</span><br><span class=\"line\">            edges[i][<span class=\"number\">2</span>] = sc.nextInt();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Arrays.sort(edges, Comparator.comparingInt(a -&gt; a[<span class=\"number\">2</span>]));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] edge : edges) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m.find(edge[<span class=\"number\">0</span>]) == m.find(edge[<span class=\"number\">1</span>])) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            m.union(edge[<span class=\"number\">0</span>], edge[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            sum += edge[<span class=\"number\">2</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count == n - <span class=\"number\">1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2023/09/19/dp%E7%BB%8F%E5%85%B8%E6%A8%A1%E6%9D%BF/",
            "url": "http://example.com/2023/09/19/dp%E7%BB%8F%E5%85%B8%E6%A8%A1%E6%9D%BF/",
            "title": "dp经典模板",
            "date_published": "2023-09-19T07:30:14.000Z",
            "content_html": "<h3 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h3>\n<p>书接上回。主要写一下 dp 的大体思路，以及背包和股票。</p>\n<h3 id=\"dp思路\"><a class=\"markdownIt-Anchor\" href=\"#dp思路\">#</a> dp 思路</h3>\n<p>场景，涉及到最值，且存在状态转化的，这个时候可以考虑用 dp。当然也不要强行用，如果暴力可以直接 a 的话，就没必要炫技了。</p>\n<p>插一嘴，类似于什么前缀和什么的，感觉就是 dp，无差。</p>\n<h3 id=\"背包\"><a class=\"markdownIt-Anchor\" href=\"#背包\">#</a> 背包</h3>\n<p>直接上代码吧，主要使用一维的 dp 数组来做背包问题</p>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "http://example.com/2023/09/19/%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E4%B8%93%E9%A2%98/",
            "url": "http://example.com/2023/09/19/%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E4%B8%93%E9%A2%98/",
            "title": "算法总结专题",
            "date_published": "2023-09-19T05:56:39.000Z",
            "content_html": "<h3 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h3>\n<p>最近笔试，有些题量大的，没有给你现场推导或者调试环境，这样的话，有些不熟悉但是很基本的算法，就会浪费很长的时间，以至于送分的拿不到，所以对于一些我自己熟悉的或者不熟悉的都需要整合，以提高速度。</p>\n<h3 id=\"思维风暴\"><a class=\"markdownIt-Anchor\" href=\"#思维风暴\">#</a> 思维风暴</h3>\n<p>也没列什么框架，目前就是打算直接将自己的想法具象化，留痕并且加深印象，话不多说，直接开始。</p>\n<p>对于核心代码模式，没什么可说的，感觉核心代码模式难度可能会上去点，也会涉及到题目给到的数据结构（treenode，listnode 等等），也更偏向于我们平时力扣的 coding 风格，所以会的会，不会的应该也不会了。</p>\n<p>对于 acm 模式，牛客和赛马平台，主要就是在于输入的接收，这个时候要淡定，好的习惯是先接收然后 sout 一下，看一下到底是什么，然后继续解题，比如我第一次做赛马，小米给的输入是 string，需要自己切分来处理数据，没经验，加上自我怀疑，就笔试很不理想。<br>\n对于 acm 来说，我觉得需要注意的就是图和树了，树的话也算是图的一种形式吧，应该以 edge 的方式接收多一点，也就是 int [] 两个节点。图的话需要进一步整合才能做分析，或者直接暴力接收，然后做题，也行，不要畏惧就是了。<br>\n对于图的话，用邻接表接个人觉得好一点，然后就相当于处理一个二维数组，dfs 可以解决，如果超时的话，就需要换图算法了。</p>\n<p>最近打算回顾两类算法，dp 的背包和股票、图的并查集 uf，kruskal，prim 以及 dijkstra</p>\n<p>具体放在下面的 blog 中，冲！</p>\n",
            "tags": [
                "算法"
            ]
        }
    ]
}