{
    "version": "https://jsonfeed.org/version/1",
    "title": "该死的秋招 • All posts by \"spring\" tag",
    "description": "孵化中···",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/10/07/IOC%E5%92%8CAOP/",
            "url": "http://example.com/2023/10/07/IOC%E5%92%8CAOP/",
            "title": "IOC和AOP",
            "date_published": "2023-10-07T03:59:35.000Z",
            "content_html": "<h3 id=\"写在前面\"><a class=\"markdownIt-Anchor\" href=\"#写在前面\">#</a> 写在前面</h3>\n<p>以前也学过，也系统的记录过，但是一个是角度不一样，一个是忘记了。现在就从使用 + 原理，重新记录一下两个核心思想</p>\n<h3 id=\"ioc\"><a class=\"markdownIt-Anchor\" href=\"#ioc\">#</a> IOC</h3>\n<p>控制反转，是一个思想，具体的实现是 DI 依赖注入。<br>\n对于 IOC 思想，几乎处处可见，对于 servlet、监听器、过滤器这些也是 tomcat 通过控制反转创建的，所以 IOC 并不是 spring 特有的</p>\n<p>依赖注入 DI，笼统的来说就是之前通过 new 的现在交给一个叫做 context 的东西来创建，也就是交给了第三方而不是程序员来控制资源的创建。</p>\n<h4 id=\"注入是怎么注入的\"><a class=\"markdownIt-Anchor\" href=\"#注入是怎么注入的\">#</a> 注入，是怎么注入的</h4>\n<p>主要分为 set 注入和构造函数注入，有两种方式：</p>\n<ul>\n<li>xml 文件，主要通过 property 标签和 constructor 标签完成注入，可以添加 autowire 属性，来完成 byname 还是 bytype 注入</li>\n<li>注解，支持注入的注解有 @component、@service、@controller、@repository、@bean、@component 等声明 bean，也就是放到 context 中，使用 @resource、@autowire、@value 等完成注入</li>\n</ul>\n<h4 id=\"实现原理\"><a class=\"markdownIt-Anchor\" href=\"#实现原理\">#</a> 实现原理</h4>\n<p>简单来说就是 map + 反射，用 map 存储唯一 id 以及对应的 bean，通过 id 定位，并通过反射来获取 bean 信息，完成注入</p>\n<h4 id=\"循环依赖\"><a class=\"markdownIt-Anchor\" href=\"#循环依赖\">#</a> 循环依赖</h4>\n<p>这边也就是引入三级缓存解决循环依赖的问题，循环依赖最简单的场景就是 a-b，b-a 有点像死锁的现象，导致出 bug。</p>\n<p>spring 对象产生需要三步骤：</p>\n<ul>\n<li>creatBeanInstance 实例化，也就是调用构造函数</li>\n<li>populateBean 填充属性</li>\n<li>initializeBean 初始化，调用 xml 文件（也就是赋值吧）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实际创建指定的bean。 此时，预创建处理已经发生，</span></span><br><span class=\"line\"><span class=\"comment\"> * 例如 检查&#123;<span class=\"doctag\">@code</span> postProcessBeforeInstantiation&#125;回调。</span></span><br><span class=\"line\"><span class=\"comment\"> * 区分默认bean实例化、使用工厂方法和自动装配构造函数。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> Object <span class=\"title function_\">doCreateBean</span><span class=\"params\">(<span class=\"keyword\">final</span> String beanName, <span class=\"keyword\">final</span> RootBeanDefinition mbd, <span class=\"keyword\">final</span> Object[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Instantiate the bean.</span></span><br><span class=\"line\">    <span class=\"type\">BeanWrapper</span> <span class=\"variable\">instanceWrapper</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    .....</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (instanceWrapper == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .....</span><br><span class=\"line\">    <span class=\"comment\">// Eagerly cache singletons to be able to resolve circular references</span></span><br><span class=\"line\">    <span class=\"comment\">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">earlySingletonExposure</span> <span class=\"operator\">=</span> (mbd.isSingleton() &amp;&amp; <span class=\"built_in\">this</span>.allowCircularReferences &amp;&amp;</span><br><span class=\"line\">            isSingletonCurrentlyInCreation(beanName));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (earlySingletonExposure) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">            logger.debug(<span class=\"string\">&quot;Eagerly caching bean &#x27;&quot;</span> + beanName +</span><br><span class=\"line\">                    <span class=\"string\">&quot;&#x27; to allow for resolving potential circular references&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//添加到三级缓存中</span></span><br><span class=\"line\">        addSingletonFactory(beanName, <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectFactory</span>&lt;Object&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> Object <span class=\"title function_\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> getEarlyBeanReference(beanName, mbd, bean);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Initialize the bean instance.</span></span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">exposedObject</span> <span class=\"operator\">=</span> bean;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//填充依赖的bean实例。</span></span><br><span class=\"line\">        populateBean(beanName, mbd, instanceWrapper);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (exposedObject != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//调用spring xml中的init 方法。</span></span><br><span class=\"line\">            exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"keyword\">return</span> exposedObject;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以循环依赖主要出现在 1，2 阶段。场景如下：</p>\n<ul>\n<li>构造函数中调用其他的 bean，形成 a-b-a 循环依赖</li>\n<li>填充属性的时候调用其他的 bean，形成 a-b-a 循环依赖</li>\n</ul>\n<p>对于循环依赖，spring 引入三级缓存来解决，意思就是执行步骤 1 的时候，将半成品 a 类，放入到三级缓存中，这样如果 a 需要 b，那么就会从三级缓存中以此寻找，1 级（singletonObject）、2 级（earlySingletonObject）、3 级（sigletonFactory）。这样找下来，可以看到，在上述的代码中，步骤一，也就是实例化后，会将这个半成品暴露到三级缓存中，那么 a 去找 b 的时候找不到，但是三级缓存中有 b；反过来，b 去找 a 的时候就找到了，从而解决循环依赖。</p>\n<p>这里有一点就是如果在三级缓存中招到了，并且完成了一个级别之后，对应的缓存中就要删除，上升一个级别。</p>\n<h3 id=\"无法解决的循环依赖\"><a class=\"markdownIt-Anchor\" href=\"#无法解决的循环依赖\">#</a> 无法解决的循环依赖</h3>\n<p>对于无法解决的循环依赖问题，有两个：</p>\n<ul>\n<li>prototype 类型的 bean，因为他们不加入缓存，所以三级缓存策略没有用</li>\n<li>构造函数中的循环依赖，因为三级缓存生效是在实例化之后，所以如果第一步就存在循环依赖，那么是无法解决的。</li>\n</ul>\n<p>对于以上两个场景，都是用延迟加载即可，@lazy 注解，具体的原理目前不是很清楚</p>\n",
            "tags": [
                "Spring"
            ]
        },
        {
            "id": "http://example.com/2023/10/06/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/",
            "url": "http://example.com/2023/10/06/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/",
            "title": "生命周期",
            "date_published": "2023-10-06T09:45:00.000Z",
            "content_html": "<h3 id=\"写在前面\"><a class=\"markdownIt-Anchor\" href=\"#写在前面\">#</a> 写在前面</h3>\n<p>这篇主要写明白会问到的生命周期，对于 Java 中常用到的，也就线程和 Bean 了，那么这两个的声明周期是什么呢，经常有这个疑问，但是没有很明确的记得，这就会在面试的时候卡壳。</p>\n<h3 id=\"bean的生命周期\"><a class=\"markdownIt-Anchor\" href=\"#bean的生命周期\">#</a> Bean 的生命周期</h3>\n<h3 id=\"thread的生命周期\"><a class=\"markdownIt-Anchor\" href=\"#thread的生命周期\">#</a> Thread 的生命周期</h3>\n",
            "tags": [
                "Spring",
                "Thread"
            ]
        }
    ]
}