<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>该死的秋招 • Posts by &#34;数据结构&#34; tag</title>
        <link>http://example.com</link>
        <description>孵化中···</description>
        <language>zh-CN</language>
        <pubDate>Tue, 26 Sep 2023 21:03:51 +0800</pubDate>
        <lastBuildDate>Tue, 26 Sep 2023 21:03:51 +0800</lastBuildDate>
        <category>hello blog</category>
        <category>设计模式</category>
        <category>MySQL</category>
        <category>算法</category>
        <category>Redis</category>
        <category>其他</category>
        <category>分布式</category>
        <category>数据结构</category>
        <category>Spring</category>
        <category>Thread</category>
        <category>Java</category>
        <category>JDK</category>
        <category>SQL</category>
        <category>JVM</category>
        <category>多线程</category>
        <category>kafka</category>
        <category>SpringBoot</category>
        <category>JUC相关零碎知识点乱写</category>
        <category>hashmap</category>
        <category>JUC</category>
        <item>
            <guid isPermalink="true">http://example.com/2023/09/26/%E8%B7%B3%E8%A1%A8%E5%92%8C%E7%BA%A2%E9%BB%91%E6%A0%91/</guid>
            <title>跳表和红黑树</title>
            <link>http://example.com/2023/09/26/%E8%B7%B3%E8%A1%A8%E5%92%8C%E7%BA%A2%E9%BB%91%E6%A0%91/</link>
            <category>数据结构</category>
            <pubDate>Tue, 26 Sep 2023 21:03:51 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;写在前面&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#写在前面&#34;&gt;#&lt;/a&gt; 写在前面&lt;/h3&gt;
&lt;p&gt;之前看 hashmap 的时候，研究过红黑树。前段时间同学面携程的时候，面试官给了跳表的八股文，我看到也懵了。翻阅相关资料才知道跳表和红黑树之前还有一定的联系，下面我们来看看。&lt;/p&gt;
&lt;h3 id=&#34;跳表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#跳表&#34;&gt;#&lt;/a&gt; 跳表&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://pic.imgdb.cn/item/6512d769c458853aeff45850.jpg&#34;&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/6512d769c458853aeff45850.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;br&gt;
如上图所示，这个就是跳表。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要一个有序的链表&lt;/li&gt;
&lt;li&gt;在有序链表之上建立 n/2 个元素，称之为第一层索引，以此类推，最高层两个索引，由此可以推算出高度，从而时间复杂度为 logn&lt;/li&gt;
&lt;li&gt;每个元素都有两个属性，一个 val，一个指向下一个的指针，所以很适合做范围查找&lt;/li&gt;
&lt;li&gt;以空间换时间，这样的话，空间一大，那么代表就是复杂度就下来了，主打的就是一个奢侈。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;红黑树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#红黑树&#34;&gt;#&lt;/a&gt; 红黑树&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/6512d93bc458853aeff55fdd.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;
先来讲一下红黑树的特征&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点是红色或者黑色&lt;/li&gt;
&lt;li&gt;根节点黑色&lt;/li&gt;
&lt;li&gt;任意一条从根节点到叶子节点路径的黑色节点数量相同&lt;/li&gt;
&lt;li&gt;一条路径不能包含连续的两个红色节点 —》从而可以推出红色节点的父节点必然是黑色&lt;/li&gt;
&lt;li&gt;红黑树中的叶子节点有点不同，他的叶子节点都是 null&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;红黑树的发展史&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#红黑树的发展史&#34;&gt;#&lt;/a&gt; 红黑树的发展史&lt;/h4&gt;
&lt;p&gt;这也是之前学习的时候了解了一点，这里就简单的总结一下，为什么会发展到红黑树，毕竟一个技术的诞生肯定是有历史的。&lt;br&gt;
首先就是从数组和链表说起了，众所不周知，数组是查询 O1，链表是删除 O1（当然这里不是说的定位到再删除）。那么除了组合数据结构，就诞生了树结构。如果不限制树的高度，也就是平衡，那么树结构就会退化为链表，所以查询也会退化到 On。后面引入了 AVL，自平衡二叉树。也就是通过自旋的方式来调整树的高度。由于满足平衡二叉树的条件比较苛刻，导致插入数据后的自选频次很高，所以引入了红黑树。红黑树只需要满足一条路径上的黑色节点数相同就行了，所以如果一条全黑，一条间隔红黑，那么最长可以 n/2 不用调整。&lt;/p&gt;
&lt;h4 id=&#34;红黑树变形&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#红黑树变形&#34;&gt;#&lt;/a&gt; 红黑树变形&lt;/h4&gt;
&lt;p&gt;将红色节点上移到其父节点，那么就会形成 B 树一样的结构，四阶 B 树（节点元素最多为 3 个）&lt;/p&gt;
&lt;h4 id=&#34;自旋&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自旋&#34;&gt;#&lt;/a&gt; 自旋&lt;/h4&gt;
&lt;p&gt;些许复杂，后面再搞&lt;/p&gt;
&lt;h3 id=&#34;跳表和红黑树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#跳表和红黑树&#34;&gt;#&lt;/a&gt; 跳表和红黑树&lt;/h3&gt;
&lt;p&gt;hashmap 为什么不用跳表？&lt;br&gt;
我看到一篇博客说的很有道理，就是 hashmap 存在 hash 冲突才用的红黑树存储相同 hash 散列后得元素，所以这个红黑树虽然是有序得，但是要明白一点，跳表得作用场景是范围查找，且需要空间换时间，但是这边散列后的元素其范围查找值我觉得有意义，但是并不完整，因为这里得范围只是冲突后的元素，那么没冲突得元素，但是在范围内得就无法被跳表涵盖进来。&lt;/p&gt;
&lt;p&gt;总的来说，就两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;红黑树不占用额外的空间&lt;/li&gt;
&lt;li&gt;hashmap 无序存储，没有范围查找的要求，所以用跳表的话，这个范围查找就没有任何的意义。准确点来说，hashmap 只需要精确查找，通过叶子节点来缩小范围，那么跳表是可以做范围检索的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是总的感觉就是跳表和红黑树其实没差别，说用这个为什么不用那个，感觉有点牵强，你要说用，那么也不是不可以用。&lt;/p&gt;
&lt;h3 id=&#34;跳表和b树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#跳表和b树&#34;&gt;#&lt;/a&gt; 跳表和 B + 树&lt;/h3&gt;
&lt;p&gt;也就是 redis 用了跳表，个人感觉，zset 他是要做范围查找的，那么就需要和 B + 树做个横向对比。&lt;br&gt;
主要的场景就是两个 Redis 和 MySQL。&lt;br&gt;
对于 B + 树和跳表，如果底层存放相同的数据，那么 B + 树的层级要远小于跳表。这个就要从节点的设计来说吧，B + 树的非叶子节点存放 16k 的信息，可以存放多个节点的信息，但是跳表一个节点一条数据（这边感觉是有说法的）&lt;br&gt;
我当时的疑问就是为什么跳表不用和 B + 树一样呢，我也整个索引节点存储多个叶子节点信息呗，但是感觉如果这样的话，那么第一就是两个就一样了，还分什么你我；第二就是对于 B + 树这样的设计，其降低层数，那么装入数据的话就是需要修改数据结构，也就是插入的复杂度很高，但是跳表随机插入即可（当然也有不是随机的实现，那个复杂度也不低）&lt;/p&gt;
&lt;p&gt;总而言之就是两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从读取来说，同样的数据如果跳表的抽取间隔不是很大的话，B + 树的层级是远小于跳表的层级的，所以 IO 次数就会少，这对于磁盘读取很重要，但是对于内存读取就可以忽略，因为两者的读取代价完全不同。&lt;/li&gt;
&lt;li&gt;从插入来说，也就是写。B + 树需要调整结构，实现复杂，但是跳表通过随机的节点插入层级，就会很快完成节点的写入，所以 Redis 在选择时，选择实现更为简单且写入效率要高，并且可以忽略读取 IO 的跳表。&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
