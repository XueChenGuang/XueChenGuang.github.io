{
    "version": "https://jsonfeed.org/version/1",
    "title": "该死的秋招 • All posts by \"java\" tag",
    "description": "孵化中···",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/10/06/%E7%BA%BF%E7%A8%8B%E6%B1%A0/",
            "url": "http://example.com/2023/10/06/%E7%BA%BF%E7%A8%8B%E6%B1%A0/",
            "title": "线程池",
            "date_published": "2023-10-06T10:39:33.000Z",
            "content_html": "<h3 id=\"写在前面\"><a class=\"markdownIt-Anchor\" href=\"#写在前面\">#</a> 写在前面</h3>\n<p>线程池算是一个高频的面试点了，除了基础的参数设置之外，还会有一些附加的点，话不多说，总结了一手</p>\n<h3 id=\"线程池的参数\"><a class=\"markdownIt-Anchor\" href=\"#线程池的参数\">#</a> 线程池的参数</h3>\n<p>线程池的参数 7 个，烂熟于心了属于是：</p>\n<ul>\n<li>corePoolSize  核心线程数</li>\n<li>maxPoolSize  最大线程数 = （核心 + 非核心）</li>\n<li>keepAliveTime  存活时间（针对空闲的非核心线程）</li>\n<li>unit  空闲时间的单位</li>\n<li>workQueue 工作的阻塞队列（具体有几个类型，也就是分无限的和有限的，array 和 linked）</li>\n<li>threadFactory  线程工厂（可以添加上线程的前缀，可自定义）</li>\n<li>rejectionPolicy  拒绝策略，有 4 个拒绝策略（1、默认直接抛出异常；2、让主线程去执行，相当于主线程充当了线程池的一员；3、默默丢弃无法执行的线程任务；4、丢弃最早的 oldest，然后当前的加入）</li>\n</ul>\n<p>参数就是上面的七个，可以自定义工厂和拒绝策略<br>\n创建的话，最原始的就是 new ThreadPoolExecutor，然后传入上面的参数<br>\n但是一般不会这么做，基于 spring 或者 springboot，会通过 @configuration 或者 xml 文件，注入线程池，然后直接 @autuwire 注入就行了</p>\n<h3 id=\"如何解决任务丢失问题\"><a class=\"markdownIt-Anchor\" href=\"#如何解决任务丢失问题\">#</a> 如何解决任务丢失问题</h3>\n<p>复杂的任务丢失说实话，感觉有点复杂，这边只讲简单的情况<br>\n从上面可以看出，拒绝策略提供的要么就是异常的抛出，那么是会导致程序中断，或者直接捕捉异常然后落库做记录（这也是一种方法），要么就是丢弃任务，这样就会导致任务丢失，所以如何解决呢？</p>\n<h4 id=\"钩子回调处理\"><a class=\"markdownIt-Anchor\" href=\"#钩子回调处理\">#</a> 钩子回调处理</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomThreadPool</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ThreadPoolExecutor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">CustomThreadPool</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize, <span class=\"type\">int</span> maximumPoolSize, <span class=\"type\">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeExecute</span><span class=\"params\">(Thread t, Runnable r)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.beforeExecute(t, r);</span><br><span class=\"line\">        <span class=\"comment\">// 在任务执行前进行一些准备操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Before executing: &quot;</span> + r.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterExecute</span><span class=\"params\">(Runnable r, Throwable t)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.afterExecute(r, t);</span><br><span class=\"line\">        <span class=\"comment\">// 在任务执行后进行一些清理操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;After executing: &quot;</span> + r.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">terminated</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.terminated();</span><br><span class=\"line\">        <span class=\"comment\">// 在线程池终止后执行清理工作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ThreadPool terminated&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到上面的方法就是继承了 TheadPoolExecutor 线程池，然后可以在任务执行前，执行后和线程池终止后进行一些切面处理；那么这样的话就可以自定义线程池，然后完成任务执行前的一些工作，做落库或者怎么样。这是一种解决方案</p>\n<h4 id=\"重写拒绝策略\"><a class=\"markdownIt-Anchor\" href=\"#重写拒绝策略\">#</a> 重写拒绝策略</h4>\n<p>个人偏向这一点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomThreadPool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">corePoolSize</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">maxPoolSize</span> <span class=\"operator\">=</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">keepAliveTime</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">TimeUnit</span> <span class=\"variable\">unit</span> <span class=\"operator\">=</span> TimeUnit.SECONDS;</span><br><span class=\"line\">        BlockingQueue&lt;Runnable&gt; workQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">RejectedExecutionHandler</span> <span class=\"variable\">rejectionHandler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CustomRejectedExecutionHandler</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ThreadPoolExecutor</span> <span class=\"variable\">executor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(corePoolSize, maxPoolSize, keepAliveTime, unit, workQueue, rejectionHandler);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建一个ScheduledThreadPoolExecutor用于处理超时的任务</span></span><br><span class=\"line\">        <span class=\"type\">ScheduledThreadPoolExecutor</span> <span class=\"variable\">timeoutExecutor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ScheduledThreadPoolExecutor</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 提交任务到线程池</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">Task</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Task</span>(<span class=\"string\">&quot;Task &quot;</span> + i);</span><br><span class=\"line\">            executor.submit(task);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 如果任务超时，将任务重新入队</span></span><br><span class=\"line\">            timeoutExecutor.schedule(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (task.isRunning()) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;Task &quot;</span> + task.getName() + <span class=\"string\">&quot; timed out, re-queueing...&quot;</span>);</span><br><span class=\"line\">                    executor.submit(task);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, <span class=\"number\">5</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 关闭线程池</span></span><br><span class=\"line\">        executor.shutdown();</span><br><span class=\"line\">        timeoutExecutor.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Task</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">boolean</span> <span class=\"variable\">running</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Task</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isRunning</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> running;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Task &quot;</span> + name + <span class=\"string\">&quot; is running.&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 模拟任务执行耗时</span></span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            running = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Task &quot;</span> + name + <span class=\"string\">&quot; completed.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomRejectedExecutionHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">RejectedExecutionHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rejectedExecution</span><span class=\"params\">(Runnable r, ThreadPoolExecutor executor)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Task &quot;</span> + ((Task) r).getName() + <span class=\"string\">&quot; rejected. Re-queuing...&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将被拒绝的任务重新放入队列</span></span><br><span class=\"line\">            executor.getQueue().put(r);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到上面重写了拒绝策略，也就是实现 RejectedExecutionHandler 接口即可，然后重写 rejectedExecution 方法，上面也用另外一个延迟线程池来执行重新入队的操作，大体上感觉没什么问题，也就是对于拒绝的线程我可以记录打印信息，然后重新入队</p>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>暂时记录这么多，感觉线程池应该问题不大了</p>\n",
            "tags": [
                "Java"
            ]
        }
    ]
}