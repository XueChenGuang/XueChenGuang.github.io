<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>该死的秋招 • Posts by &#34;mysql&#34; tag</title>
        <link>http://example.com</link>
        <description>孵化中···</description>
        <language>zh-CN</language>
        <pubDate>Tue, 10 Oct 2023 20:35:52 +0800</pubDate>
        <lastBuildDate>Tue, 10 Oct 2023 20:35:52 +0800</lastBuildDate>
        <category>hello blog</category>
        <category>设计模式</category>
        <category>MySQL</category>
        <category>算法</category>
        <category>Redis</category>
        <category>其他</category>
        <category>分布式</category>
        <category>数据结构</category>
        <category>Spring</category>
        <category>Thread</category>
        <category>Java</category>
        <category>JDK</category>
        <category>SQL</category>
        <category>JVM</category>
        <category>多线程</category>
        <category>kafka</category>
        <item>
            <guid isPermalink="true">http://example.com/2023/10/10/join%E8%A1%A8%E8%BF%9E%E6%8E%A5/</guid>
            <title>join表连接</title>
            <link>http://example.com/2023/10/10/join%E8%A1%A8%E8%BF%9E%E6%8E%A5/</link>
            <category>MySQL</category>
            <pubDate>Tue, 10 Oct 2023 20:35:52 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;写在前面&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#写在前面&#34;&gt;#&lt;/a&gt; 写在前面&lt;/h3&gt;
&lt;p&gt;表连接，一直就会用个 left join&lt;/p&gt;
&lt;h3 id=&#34;一张图搞定&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一张图搞定&#34;&gt;#&lt;/a&gt; 一张图搞定&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic.imgdb.cn/item/6525450ac458853aefb43c95.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2023/09/25/%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E6%80%A7/</guid>
            <title>事务的隔离性</title>
            <link>http://example.com/2023/09/25/%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E6%80%A7/</link>
            <category>MySQL</category>
            <pubDate>Mon, 25 Sep 2023 17:44:47 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;写在前面&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#写在前面&#34;&gt;#&lt;/a&gt; 写在前面&lt;/h3&gt;
&lt;p&gt;一直有种面对隔离级别的恐惧，这次看懂了，稍做记录&lt;/p&gt;
&lt;h3 id=&#34;基本概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本概念&#34;&gt;#&lt;/a&gt; 基本概念&lt;/h3&gt;
&lt;p&gt;如果是单线程，那么完全不会出现什么问题。直到多线程的出现，就引发了一些列的问题：脏读，不可重复读，幻读。简单解释一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;脏读：一个事务读取到了另一个没有提交事务修改过的数据&lt;/li&gt;
&lt;li&gt;不可重复读：一个事务内，两次读取到的同一数据的内容不一样&lt;/li&gt;
&lt;li&gt;幻读：一个事务内，查询符合条件的记录数，两次读到的记录数不一样&lt;br&gt;
以上的严重性，就是由上到下递减。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与之对应的有几个隔离级别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读未提交&lt;/li&gt;
&lt;li&gt;读已提交&lt;/li&gt;
&lt;li&gt;可重复读&lt;/li&gt;
&lt;li&gt;串行&lt;br&gt;
 innodb 存储引擎，默认的隔离级别是可重复读。&lt;br&gt;
简单点来说的话就是，读未提交就是读最新数据；读已提交就是可以读到其他事务提交的内容；可重复读就是可以重复读取相同的数据；串行，就是事务挨着事务，加锁了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;read-view和隐藏字段&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#read-view和隐藏字段&#34;&gt;#&lt;/a&gt; Read view 和隐藏字段&lt;/h3&gt;
&lt;p&gt;一条记录有两个隐藏字段：trx_id 和 roll_pointer；分别表示最新修改的事务的 id 和指向 undo_log 中的日志指针。&lt;/p&gt;
&lt;p&gt;read view 说白了就是有关事务 id 的一种数据结构，这里面的主要结构就是四个字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;min_trx_id：当前存在的 id 最小的事务（注：事务的 id 是自增长的）&lt;/li&gt;
&lt;li&gt;max_trx_id：下一个事务 id&lt;/li&gt;
&lt;li&gt;m_ids：当前存在的事务 id 列表&lt;/li&gt;
&lt;li&gt;creator_trx_id：创建的事务 id&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mvcc多版本并发控制实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mvcc多版本并发控制实现&#34;&gt;#&lt;/a&gt; mvcc（多版本并发控制）实现&lt;/h3&gt;
&lt;p&gt;感觉也没什么高深的，看了才知道就是利用上面的字段来完成的，也就是要明白一些规则。&lt;br&gt;
注意：这边我刚明白的一点，read view 的创建和事务没有必然的关系，也就是 read view 可以是在事务中创建，也可以在一开始创建也就对应这两种隔离级别，所以 min，max，ids 这几个字段才有了不可替代性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于不活跃的资源我可以改动，也就是小于 min 的。&lt;/li&gt;
&lt;li&gt;对于未创建的我不能改动，也就是大于等于 max 的&lt;/li&gt;
&lt;li&gt;对于之间的，也就要看在不在 ids 中了，也就是这个事务提交了没有。如果我创建 read view 的时候，他提交了，那么我就可以读了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看到了哪些可以读，那么就直接读，如果不可以读，就顺着 roll_pointer 链找下去，也就是找之前的记录，来完成当前的事务的隔离。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2023/09/14/Explain%E5%92%8C%E7%B4%A2%E5%BC%95/</guid>
            <title>Explain和索引</title>
            <link>http://example.com/2023/09/14/Explain%E5%92%8C%E7%B4%A2%E5%BC%95/</link>
            <category>MySQL</category>
            <pubDate>Thu, 14 Sep 2023 21:31:27 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;前言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h3&gt;
&lt;p&gt;从原先的 “原来还能通过 explain” 查看 sql 的运行效率，到 “请你讲讲 explain 中的各个字段”，再到 “解释一下 extra 字段的值的含义以及效率排序”，一脸懵，不学不行啊，记录一下呗。&lt;/p&gt;
&lt;h3 id=&#34;explain&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#explain&#34;&gt;#&lt;/a&gt; Explain&lt;/h3&gt;
&lt;p&gt;当需要查看一下当前 sql 在 mysql 中的运行状态时（这个状态包括一些执行时间，是否使用索引，检索的表，检索字段大小）等等，主要还是针对一些其中的字段值，来判断如何进一步优化 sql。&lt;/p&gt;
&lt;p&gt;说实话，explain 很复杂，没太整明白。主要就说一些自己整明白的点吧&lt;/p&gt;
&lt;p&gt;ID：如果存在多个 select 的话，那么 id 就会有多个值，id 值越大，表示优先级越高。&lt;/p&gt;
&lt;p&gt;select_type：查询类型，也就是存在多个 select 的时候，这个时候就会有不同的类型出现，整明白的也就几个吧：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;simple，表示最简单的查询，无嵌套&lt;/li&gt;
&lt;li&gt;primary，最外层的查询&lt;/li&gt;
&lt;li&gt;union，用 union 接的查询；也不是百分百，如果接在子查询里面，那么貌似第一个是 derived&lt;/li&gt;
&lt;li&gt;derived，子查询&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;table：查询的表&lt;/p&gt;
&lt;p&gt;type：连接类型，也就是存在级联查询中，下面按照关键字优先级展开简单讲讲每个关键字吧：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;system，个人感觉不太存在，也就是这个表只有一行，emmm 太抽象&lt;/li&gt;
&lt;li&gt;const，针对主键或唯一建的查询，只返回一行，比较好理解&lt;/li&gt;
&lt;li&gt;eq_ref，使用了索引的全部组成，并且索引是主键或者唯一键，也好理解&lt;/li&gt;
&lt;li&gt;ref, 不是很懂，貌似是用到了索引，但是没有主键索引和唯一键索引&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;range：范围查询涉及到的字段，关键字貌似就两个 index 和 all，很明显一个用到了索引，另一个全表扫描，如果全表的话，就需要反思一下了&lt;/p&gt;
&lt;p&gt;possible_key 和 key：这两个放一起讲好了，也就是有的索引和用到的索引，没什么好讲的。&lt;/p&gt;
&lt;p&gt;key_len：索引字段长度，没什么好讲的&lt;/p&gt;
&lt;p&gt;rows：估计会扫描的行数，值越小越好&lt;/p&gt;
&lt;p&gt;extra：额外信息，感觉和前面给到的信息有点重，但是可能是针对不同场景的，下面有些字段要说明一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;using filesort，文件排序，sql 中包含 order by，然后索引不足以解决 order，那么 mysql 会选择使用内存，超过一定长度就磁盘，这种情况就是这个字段。&lt;/li&gt;
&lt;li&gt;using temporary，临时表，sql 中包含 group by，这个时候索引不足以解决问题，那么就会借助临时表来完成&lt;/li&gt;
&lt;li&gt;using index，使用索引可以解决，&lt;/li&gt;
&lt;li&gt;using where，满足部分的索引，也就是使用了，但没完全使用，比如仅满足&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
