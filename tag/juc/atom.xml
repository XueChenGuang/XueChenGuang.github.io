<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>该死的秋招 • Posts by &#34;juc&#34; tag</title>
    <link href="http://example.com" />
    <updated>2023-10-22T08:08:16.000Z</updated>
    <category term="hello blog" />
    <category term="设计模式" />
    <category term="MySQL" />
    <category term="算法" />
    <category term="Redis" />
    <category term="其他" />
    <category term="分布式" />
    <category term="数据结构" />
    <category term="Spring" />
    <category term="Thread" />
    <category term="Java" />
    <category term="JDK" />
    <category term="SQL" />
    <category term="JVM" />
    <category term="多线程" />
    <category term="kafka" />
    <category term="SpringBoot" />
    <category term="JUC相关零碎知识点乱写" />
    <category term="hashmap" />
    <category term="JUC" />
    <category term="redis" />
    <category term="springboot" />
    <entry>
        <id>http://example.com/2023/10/22/threadlocal/</id>
        <title>threadlocal</title>
        <link rel="alternate" href="http://example.com/2023/10/22/threadlocal/"/>
        <content type="html">&lt;h3 id=&#34;写在前面&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#写在前面&#34;&gt;#&lt;/a&gt; 写在前面&lt;/h3&gt;
&lt;p&gt;threadlocal，线程的本地变量&lt;/p&gt;
&lt;h3 id=&#34;强软弱虚引用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#强软弱虚引用&#34;&gt;#&lt;/a&gt; 强软弱虚引用&lt;/h3&gt;
&lt;p&gt;了解 threadlocal 之前，就需要了解引用的类型，因为 threadlocal 用到了弱引用。&lt;/p&gt;
&lt;p&gt;这边提一嘴 gc 的问题，gc 触发的时间根据 gc 算法（我记忆中目前能够理清楚的是这样）不同，gc 的时间点也不同，分 young 和 old gc，所以说这个 gc 触发的时候，你的引用有的是还在的，那么强引用就是 gc 不掉的，也就是还没出我的作用域呢，也就是还存活呢。那么对于软引用，空间满了，不管你还有没有在用呢，直接 gc。对于弱引用，只要 gc 触发看到了，不管满没满，直接 gc&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;强引用：对于 object o = new object (); 这样的 o 指向的引用就是强引用。&lt;/li&gt;
&lt;li&gt;软引用：很少使用，但是有他的使用场景，对于特别大的图片，如果使用强引用，那么就很占地方，gc 不了，如果，用一下就给 gc 了，那么每次用都要 load，这样很耗时，所以软引用来了，只有当 jvm 堆空间满了，那么 gc 软引用。使用方法 softregerence&amp;lt;byte []&amp;gt; m = new softreference&amp;lt;&amp;gt;(new byte [1024&lt;em&gt;1024&lt;/em&gt;10]); 好像是套壳引用，也就是我要用个 byte 数组的时候，这个时候将它放在软引用的 new 里面。 那么这个 softreference 占不占空间呢，肯定站，但是估计是个空壳。&lt;/li&gt;
&lt;li&gt;弱引用：weakreference，当遇到 gc 的时候，直接被回收。&lt;/li&gt;
&lt;li&gt;虚引用：phantomreference，不咋用。特点就是你放在里面，get 是 get 不到的，但是弱引用只要没被回收还是能够 get 到的。他只有一个应用场景，堆外内存，零拷贝的起始点。也就是 java 里面有对象是关联着堆外的内存中的对象的，这个 java 里面的就用虚引用给他标记起来，然后有个专门的队列管理着这些虚引用，如果回收这个对象就需要将其关联的堆外内存也回收掉，不然就是内存泄漏。零拷贝和 NIO 都是用的虚引用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;threadlocal&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#threadlocal&#34;&gt;#&lt;/a&gt; threadlocal&lt;/h3&gt;
&lt;p&gt;这边就来讲一下 threadlocal&lt;br&gt;
&lt;img data-src=&#34;https://pic.imgdb.cn/item/65352e91c458853aefda70bb.jpg&#34; alt=&#34;&#34;&gt;&lt;br&gt;
 当线程中使用 threadlocal，放对象进去的时候，是往线程的 threadlocalmap 中存放 key 为 threadlocal，value 为放进去的对象的 entry。这个 entry 是继承的 weakreference，他的 key 是一个弱引用。&lt;/p&gt;
&lt;p&gt;这么设计的好处就是，当有多个线程指向这个 threadlocal 的时候，如果不用了，那么就会 gc 掉，所以如果是强引用的话，那么将很难被 gc，因为这边不用了指不定有多少线程在用，这将造成 threadlocal 这块的内存泄漏。但是有另外的一个问题，就是现在这个 key 是弱引用，所以当我外面的强引用被 gc 掉之后，这个弱引用就指向 null 了，但是 value 是强引用，导致 value 回收不掉。所以使用完了需要使用 threadlocal 的 remove，这个会回收掉 key 为 null 的 entry。&lt;/p&gt;
&lt;p&gt;这边注意一点，对于 entry 的 key 和 value 是分开回收的。&lt;/p&gt;
</content>
        <category term="JUC" />
        <updated>2023-10-22T08:08:16.000Z</updated>
    </entry>
</feed>
