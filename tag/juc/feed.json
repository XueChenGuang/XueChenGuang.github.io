{
    "version": "https://jsonfeed.org/version/1",
    "title": "该死的秋招 • All posts by \"juc\" tag",
    "description": "孵化中···",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/10/23/volatile/",
            "url": "http://example.com/2023/10/23/volatile/",
            "title": "volatile",
            "date_published": "2023-10-23T03:05:46.000Z",
            "content_html": "<h3 id=\"写在前面\"><a class=\"markdownIt-Anchor\" href=\"#写在前面\">#</a> 写在前面</h3>\n<p>对于 volatile，很神奇，玛德，感觉懂了，但是每次一回想总感觉差点什么。</p>\n<h3 id=\"缓存行\"><a class=\"markdownIt-Anchor\" href=\"#缓存行\">#</a> 缓存行</h3>\n<p>缓存行也是最近刚刷新的一个概念，对于线程来说，都会将内存中的数据缓存到各自的缓存中，也就是所谓的 cache。那么这个 cache 是怎么读取的呢，一行 64 字节，所以如果需要读取的变量在这一行上，那么就会将这一整行读进来，也就是说 cache 读取的最小单位是 64 字节。</p>\n<h3 id=\"缓存一致性\"><a class=\"markdownIt-Anchor\" href=\"#缓存一致性\">#</a> 缓存一致性</h3>\n<p>那么如何保证缓存一致性呢？<br>\n有一种现象，两个线程，读取了同一个缓存行，两个都对这个缓存行上的数据进行了修改，那么当一个修改完了，没有通知另一个的时候，这个时候就出现了不一致的问题，也就是经典的多线程的问题。</p>\n<h3 id=\"volatile\"><a class=\"markdownIt-Anchor\" href=\"#volatile\">#</a> volatile</h3>\n<p>引入今天的主角，volatile<br>\nvolatile 有两个特性，可见性和一致性（多线程三大特性，满足两个），那么是如何保证的呢。个人感觉说这两个特性有点抽象，其实 volatile 干的事就是强制走主存并且禁止指令重排（加入了内存屏障 ss 写 sl； ll 读 ls）</p>\n<p>volatile 的规范有这两个，当读取 volatile 的时候必须从主存中进行读取（也就是跨过缓存，读主存，然后将主存中的数据再读到缓存中来），修改完 volatile 变量后同步到主存中。但是像 i++ 这样需要读取，然后再赋值的情况，volatile 就解决不了。</p>\n<p>为什么解决不了呢，网上有从 cpu 的结构出发的 cpu 包括 pc 寄存器 以及 alu；有个说法是读取 m 的值到寄存器中了，那么这个 m 值发生变化的话，只会影响到 cpu 缓存并不会干涉到寄存器，所以 invalid 就不行。另外一个说的是虽然读到了，但是执行了 + 1 操作，这个时候进行 store，是不会进行重新读取的，如果没有进行 + 1 操作，那么 m 值 invalid 之后还是会进行重新读取的。</p>\n<p>目前个人更偏向于后者，前者感觉有点问题，但也说不出哪里有问题 hhhh</p>\n<p>但是看到了一个很有意思的评论：线程安全是由这三大问题导致的：</p>\n<ul>\n<li>cpu 缓存引起的可见性问题，缓存与主存</li>\n<li>cpu 指令重排，引起的顺序问题</li>\n<li>cpu 切换，线程中断引起的原子性问题，也就是 cpu 切换</li>\n</ul>\n",
            "tags": [
                "JUC"
            ]
        },
        {
            "id": "http://example.com/2023/10/22/threadlocal/",
            "url": "http://example.com/2023/10/22/threadlocal/",
            "title": "threadlocal",
            "date_published": "2023-10-22T08:08:16.000Z",
            "content_html": "<h3 id=\"写在前面\"><a class=\"markdownIt-Anchor\" href=\"#写在前面\">#</a> 写在前面</h3>\n<p>threadlocal，线程的本地变量</p>\n<h3 id=\"强软弱虚引用\"><a class=\"markdownIt-Anchor\" href=\"#强软弱虚引用\">#</a> 强软弱虚引用</h3>\n<p>了解 threadlocal 之前，就需要了解引用的类型，因为 threadlocal 用到了弱引用。</p>\n<p>这边提一嘴 gc 的问题，gc 触发的时间根据 gc 算法（我记忆中目前能够理清楚的是这样）不同，gc 的时间点也不同，分 young 和 old gc，所以说这个 gc 触发的时候，你的引用有的是还在的，那么强引用就是 gc 不掉的，也就是还没出我的作用域呢，也就是还存活呢。那么对于软引用，空间满了，不管你还有没有在用呢，直接 gc。对于弱引用，只要 gc 触发看到了，不管满没满，直接 gc</p>\n<ul>\n<li>强引用：对于 object o = new object (); 这样的 o 指向的引用就是强引用。</li>\n<li>软引用：很少使用，但是有他的使用场景，对于特别大的图片，如果使用强引用，那么就很占地方，gc 不了，如果，用一下就给 gc 了，那么每次用都要 load，这样很耗时，所以软引用来了，只有当 jvm 堆空间满了，那么 gc 软引用。使用方法 softregerence&lt;byte []&gt; m = new softreference&lt;&gt;(new byte [1024<em>1024</em>10]); 好像是套壳引用，也就是我要用个 byte 数组的时候，这个时候将它放在软引用的 new 里面。 那么这个 softreference 占不占空间呢，肯定站，但是估计是个空壳。</li>\n<li>弱引用：weakreference，当遇到 gc 的时候，直接被回收。</li>\n<li>虚引用：phantomreference，不咋用。特点就是你放在里面，get 是 get 不到的，但是弱引用只要没被回收还是能够 get 到的。他只有一个应用场景，堆外内存，零拷贝的起始点。也就是 java 里面有对象是关联着堆外的内存中的对象的，这个 java 里面的就用虚引用给他标记起来，然后有个专门的队列管理着这些虚引用，如果回收这个对象就需要将其关联的堆外内存也回收掉，不然就是内存泄漏。零拷贝和 NIO 都是用的虚引用</li>\n</ul>\n<h3 id=\"threadlocal\"><a class=\"markdownIt-Anchor\" href=\"#threadlocal\">#</a> threadlocal</h3>\n<p>这边就来讲一下 threadlocal<br>\n<img data-src=\"https://pic.imgdb.cn/item/65352e91c458853aefda70bb.jpg\" alt=\"\"><br>\n 当线程中使用 threadlocal，放对象进去的时候，是往线程的 threadlocalmap 中存放 key 为 threadlocal，value 为放进去的对象的 entry。这个 entry 是继承的 weakreference，他的 key 是一个弱引用。</p>\n<p>这么设计的好处就是，当有多个线程指向这个 threadlocal 的时候，如果不用了，那么就会 gc 掉，所以如果是强引用的话，那么将很难被 gc，因为这边不用了指不定有多少线程在用，这将造成 threadlocal 这块的内存泄漏。但是有另外的一个问题，就是现在这个 key 是弱引用，所以当我外面的强引用被 gc 掉之后，这个弱引用就指向 null 了，但是 value 是强引用，导致 value 回收不掉。所以使用完了需要使用 threadlocal 的 remove，这个会回收掉 key 为 null 的 entry。</p>\n<p>这边注意一点，对于 entry 的 key 和 value 是分开回收的。</p>\n",
            "tags": [
                "JUC"
            ]
        }
    ]
}